#!/usr/bin/cycript 

function weak_classdump(classname,outputdir){
	
	dumpMode=0; 
	// 0 = Dump without superclass's methods  (fastest)
	// 1 = Dump including only superclass's methods that are also implemented in our class

	classString = "/**\n * This header is generated by weak_classdump 0.0.1\n * weak_classdump is Freeware by Elias Limneos.\n * weak_classdump currently assumes every variable for (id)\n * so make sure you change that accordingly\n *\n */\n\n";
	_NSSelectorFromString=new Functor(dlsym(RTLD_DEFAULT,"NSSelectorFromString"),":@");
	superclass=classname.superclass;
	if (superclass!=NULL){
		classString = classString.toString()+[NSString stringWithString:@"@interface "+classname.toString()+" : "+superclass.toString()].toString();
	}
	else{
		classString = classString.toString()+[NSString stringWithString:@"@interface "+classname.toString()].toString();
	}
  
	classNameNSString = [NSString stringWithCString:classname];
  
	if (![classname respondsToSelector:@selector(sharedApplication)]){ // there can be only one... 
		object = [new classname init];
	}
	else {
		object = [classname sharedApplication];
	}
  
	if (![classname.superclass respondsToSelector:@selector(sharedApplication)]){ // there can be only one... 
		superobject = [new classname.superclass init];
	}
	else {
		superobject = [classname.superclass sharedApplication];
	}

	classString = classString.toString()+" {";  
	superClassIvars=[NSMutableArray array];
	for each (ivar in [i for (i in *superobject)]){
		if (![[NSString stringWithCString:ivar] isEqualToString:@"isa"]){
			[superClassIvars addObject:[NSString stringWithCString:ivar]];
		}
	}
	
	for each (ivar in [i for (i in *object)]){
		if (![[NSString stringWithCString:ivar] isEqualToString:@"isa"] && ![superClassIvars containsObject:[NSString stringWithCString:ivar]]){
			classString=classString.toString()+"\n\tid "+ivar.toString()+"; "; 
		}
	}
  
	// + methods
	classString = classString.toString()+"\n }";    
	classConstructorMessages = classname.constructor.messages;
  	classMessages = classname.messages;
    
	for each (message in [classConstructorMessages allKeys]){
    premessage=[message stringByReplacingOccurrencesOfString:"\"" withString:""];
  	aSelector=_NSSelectorFromString(message);
	   // don't include superclass's methods that our class doesn't implement, nor NSObject's common methods	
		if ([classname implementsSelector:aSelector] && ( ( ![classname.superclass respondsToSelector:aSelector] && ![NSObject respondsToSelector:aSelector]) || [classname isEqual:NSObject] || dumpMode==1) ){
			message = [message stringByReplacingOccurrencesOfString:@":" withString:@":(id)arg "];
			classString = classString.toString()+"\n+(id)"+message.toString()+";";
		}
	} 
	
	classString = classString.toString()+"\n-(id)init;"; // add a standard init method since we trim it below
	for each (message in [classMessages allKeys]){
		premessage = [message stringByReplacingOccurrencesOfString:"\"" withString:""];    
		aSelector = _NSSelectorFromString(message);
          
		if ([classname instancesImplementSelector:aSelector] && ( (![classname.superclass instancesRespondToSelector:aSelector]  && ![NSObject instancesRespondToSelector:aSelector]) || [classname isEqual:NSObject] || dumpMode==1) ){
			message = [message stringByReplacingOccurrencesOfString:@":" withString:@":(id)arg "];
			messageParts = [message componentsSeparatedByString: " "];
			i = 0;
			newParts = [NSMutableArray array];
			for each (part in messageParts){
				i++;
				part = [part stringByReplacingOccurrencesOfString:@")arg" withString:@")arg"+i.toString()];
				[newParts addObject:part];
			}
			message = [newParts componentsJoinedByString:@" "];
			classString = classString.toString()+"\n-(id)"+message.toString()+";";      
		}
	} 

	classString = classString.toString()+"\n@end";
 
	if (typeof(outputdir) == 'undefined'){
		outputdir = "/tmp/";
	}
	classString = [NSString stringWithString:classString ]; 
	if ([classString writeToFile:outputdir.toString()+classname.toString()+".h" atomically:YES]){
		return "Wrote file to "+outputdir.toString()+classname.toString()+".h";
	}
	else {
		return "There were errors writing to "+outputdir.toString()+classname.toString()+".h - Check file path and permissions?";
	}
}
// Usage example : weak_classdump(SBAwayController);
// (will write to default path "/tmp/SBAwayController.h"
// example 2: weak_classdump(UIApplication,"/var/mobile/");
// will write to "/var/mobile/UIApplication.h"
